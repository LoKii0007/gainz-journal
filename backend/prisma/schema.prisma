generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String?
  gender    Gender?
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  profiles  Profile[]
}

model Profile {
  id         String     @id @default(uuid())
  name       String
  active     Boolean    @default(false)
  userId     String
  weightUnit WeightUnit @default(KG)
  weightType WeightType @default(PER_SIDE)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  workouts   Workout[]
}

model Workout {
  id        String     @id @default(uuid())
  title     String
  day       Day
  profileId String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  exercises Exercise[]
  profile   Profile?   @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Exercise {
  id        String   @id @default(uuid())
  name      String
  workoutId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sets      Set[]
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}

enum WeightUnit {
  KG
  LBS
}

enum WeightType {
  TOTAL
  PER_SIDE
}

model Set {
  id         String     @id @default(uuid())
  reps       Int
  weight     Float
  unit       WeightUnit @default(KG)
  weightType WeightType @default(PER_SIDE)
  exerciseId String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  exercise   Exercise   @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}
